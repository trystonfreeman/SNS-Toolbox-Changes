:py:mod:`sns_toolbox.networks`
==============================

.. py:module:: sns_toolbox.networks

.. autoapi-nested-parse::

   Networks store neuron and synapse types, and the pattern of connections between them. While not capable of being
   simulated directly, they are used as a template for compilation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sns_toolbox.networks.Network
   sns_toolbox.networks.AdditionNetwork
   sns_toolbox.networks.MultiplicationNetwork
   sns_toolbox.networks.DivisionNetwork
   sns_toolbox.networks.DifferentiatorNetwork
   sns_toolbox.networks.IntegratorNetwork



Functions
~~~~~~~~~

.. autoapisummary::

   sns_toolbox.networks.__kernel_connections_1d__
   sns_toolbox.networks.__kernel_connections_2d__



.. py:class:: Network(name: str = 'Network')

   Base class for all Networks.

   :param name: Name for this network, defaults to 'Network".
   :type name: str, optional

   .. py:method:: get_num_neurons(self) -> int

      Calculate the number of neurons in the network, including within populations.

      :return: The number of neurons in the network.
      :rtype: int


   .. py:method:: get_num_connections(self) -> int

      Calculate the number of connections in the network. Does not account for individual synapses between neurons in
      populations.

      :return: The number of connections in the network.
      :rtype: int


   .. py:method:: get_num_populations(self) -> int

      Get the number of populations in the network.

      :return: Number of populations.
      :rtype: int


   .. py:method:: get_num_inputs(self) -> int

      Get the number of input nodes to the network. Vector inputs are treated as a single input node.

      :return: Number of inputs.
      :rtype: int


   .. py:method:: get_num_inputs_actual(self) -> int

      Calculate the number of individual inputs throughout the network. Vector inputs have one input per dimension.

      :return: Number of individual inputs.
      :rtype: int


   .. py:method:: get_num_outputs(self) -> int

      Get the number of output nodes from the network. Vector outputs have one output node.

      :return: Number of outputs.
      :rtype: int


   .. py:method:: get_num_outputs_actual(self) -> int

      Calculate the number of individual outputs from the network. Vector outputs have one output per dimension.

      :return: Number of individual outputs.
      :rtype: int


   .. py:method:: get_population_index(self, name: str) -> int

      Given a string, find the numerical index of the population corresponding to that name within the network.

      :param name: Name of the population to find.
      :type name: str
      :return: Index of the population.
      :rtype: int


   .. py:method:: get_connection_index(self, name: str) -> int

      Given a string, find the numerical index of the connection corresponding to that name within the network.

      :param name: Name of the connection to find.
      :type name: str
      :return: Index of the connection.
      :rtype: int


   .. py:method:: get_input_index(self, name: str) -> int

      Given a string, find the numerical index of the input node given by that name within the network.

      :param name: Name of the input node to find.
      :type name: str
      :return: Index of the input node.
      :rtype: int


   .. py:method:: add_population(self, neuron_type: sns_toolbox.neurons.Neuron, shape, name: str = None, color=None, initial_value=None) -> None

      Add a neural population to the network.

      :param neuron_type:  Type of neuron to add.
      :type neuron_type: sns_toolbox.design.neurons.Neuron
      :param shape: The number of neurons in each dimension of the population.
      :type shape: np.ndarray or torch.tensor
      :param name: Name of the population, default is the original name.
      :type name: str, optional
      :param color: Color of the population in the rendered image, default is the original color.
      :type color: str, optional
      :param initial_value: Initial value of membrane voltage for each neuron in the population. Must be either a
          single value, or an array matching 'shape'. Default value is the original value.
      :type initial_value: class: 'numbers.Number', class: 'np.ndarray', or class: 'torch.tensor'
      :return: None
      :rtype: N/A


   .. py:method:: add_neuron(self, neuron_type: sns_toolbox.neurons.Neuron, name=None, color=None, initial_value=None) -> None

      Add a neuron to the network. Note that this is just a special case of addPopulation, which makes a
      population of 1 neuron.

      :param neuron_type:  Type of neuron to add.
      :type neuron_type: sns_toolbox.design.neurons.Neuron
      :param name:        Name of the neuron, defaults to the original name.
      :type name:         str, optional
      :param color:       Color of the neuron in the visual render, defaults to the original color.
      :type color:        str, optional
      :param initial_value: Initial value of the membrane voltage, defaults to 0.0. Units are millivolts (mV).
      :type initial_value: Number
      :return:    None
      :rtype: N/A


   .. py:method:: add_input(self, dest: Any, size: int = 1, name: str = 'Input', color='white') -> None

      Add an input source to the network.

      :param dest:        Destination this input connects to.
      :type dest:         int or string
      :param size:        Number of input elements, default is 1.
      :type size:         int, optional
      :param name:        Name of the input node, default is 'Input'.
      :type name:         str, optional
      :param color:       Color of the input node in the visual render, default is 'white'.
      :type color:        str, optional
      :return:    None
      :rtype:     N/A


   .. py:method:: add_output(self, source: Any, name: str = 'Output', spiking: bool = False, color: str = 'white') -> None

      Add an output node to the network.

      :param source:      Source this output is connected to.
      :type source:       int or str
      :param name:        Name of the node, defaults to 'Output'.
      :type name:         str, optional
      :param spiking:     Flag for if this node stores voltage or spikes, default is 'False'.
      :type spiking:      bool, optional
      :param color:       Color of the output in the visual render, default is 'white'.
      :type color:        str, optional
      :return: None
      :rtype: N/A


   .. py:method:: add_connection(self, connection_type: sns_toolbox.connections.Connection, source: Any, destination: Any, name: str = None, view_label: bool = False) -> None

      Add a synaptic connection between two populations in the network.

      :param connection_type: Type of connection to add.
      :type connection_type: sns_toolbox.design.connections.Connection
      :param source:      Index or name of source population in the network.
      :type source:       int or str
      :param destination: Index or name of destination population in the network.
      :type destination:  int or str
      :param name:        Name of synapse, default is the original name.
      :type name:         str, optional
      :param view_label:  Flag to render the name on the output graph, default is 'False'.
      :type view_label:   bool, optional
      :return: None
      :rtype: N/A


   .. py:method:: add_network(self, network: Network, color: str = None) -> None

      Add an existing topology of inputs, outputs, and populations to the network.

      :param network: Network to copy over.
      :type network:  sns_toolbox.design.networks.Network
      :param color:   Color to render nodes in the network, default is the original colors.
      :type color:    str, optional
      :return: None
      :rtype: N/A


   .. py:method:: copy(self)

      Create a copy of the network.

      :return: A new network with the same properties as the original. Each can be edited without effecting the other.
      :rtype: sns_toolbox.design.networks.Network


   .. py:method:: compile(self, dt=0.01, backend='numpy', device='cpu', debug=False, return_params=False) -> sns_toolbox.backends.Backend



.. py:function:: __kernel_connections_1d__(pop_size, kernel, fill_value=0.0)

   Generate a connection matrix from a kernel vector and population size.

   :param pop_size: Number of neurons in the population.
   :type pop_size: int
   :param kernel: Kernel vector to apply.
   :type kernel: list, np.ndarray, or torch.tensor
   :return: Connection matrix.
   :rtype: np.ndarray


.. py:function:: __kernel_connections_2d__(pop_shape, kernel, fill_value=0.0)

   Generate a connection matrix from a kernel matrix and population shape.

   :param pop_shape: Shape of the population.
   :type pop_shape: list, np.ndarray, or torch.tensor
   :param kernel: Kernel matrix to apply.
   :type kernel: np.ndarray or torch.Tensor
   :return: Connection matrix.
   :rtype: np.ndarray


.. py:class:: AdditionNetwork(gains, add_del_e=100, sub_del_e=-40, neuron_type=NonSpikingNeuron(), name='Add', R=20.0, **kwargs)

   Bases: :py:obj:`Network`

   Network which performs addition or subtraction of multiple inputs. Currently only supports non-spiking neurons.

   :param gains:       List of addition or subtraction weights.
   :type gains:        list, np.ndarray, or torch.tensor
   :param add_del_e:   Reversal potential of addition synapses, default is 100. Unit is millivolts (mV).
   :type add_del_e:    Number, optional
   :param sub_del_e:   Reversal potential of subtraction synapses, default is -40. Unit is millivolts (mV).
   :type sub_del_e:    Number, optional
   :param neuron_type: Neuron preset to use, default is sns_toolbox.design.neurons.NonSpikingNeuron.
   :type neuron_type:  sns_toolbox.design.neurons.NonSpikingNeuron, optional
   :param name:        Name of this network, default is 'Add'.
   :type name:         str, optional


.. py:class:: MultiplicationNetwork(neuron_type=NonSpikingNeuron(), name='Multiply', R=20.0, **kwargs)

   Bases: :py:obj:`Network`

   Network where the activity in neuron 0 is roughly multiplied by the activity in neuron 1. Currently only supports
   non-spiking neurons.

   :param neuron_type: Neuron preset to use, default is sns_toolbox.design.neurons.NonSpikingNeuron.
   :type neuron_type:  sns_toolbox.design.neurons.NonSpikingNeuron, optional
   :param name:        Name of this network, default is 'Multiply'.
   :type name:         str, optional


.. py:class:: DivisionNetwork(gain, ratio, name='Divide', neuron_type=NonSpikingNeuron(), R=20.0, **kwargs)

   Bases: :py:obj:`Network`

   Network where the activity in neuron 0 is roughly divided by the activity in neuron 1. Currently only supports
   non-spiking neurons.

   :param neuron_type: Neuron preset to use, default is sns_toolbox.design.neurons.NonSpikingNeuron.
   :type neuron_type:  sns_toolbox.design.neurons.NonSpikingNeuron, optional
   :param ratio:       Modulation ratio.
   :type ratio:        Number
   :param name:        Name of this network, default is 'Divide'.
   :type name:         str, optional


.. py:class:: DifferentiatorNetwork(slew_rate=1.0, name='Differentiate', tau_fast=1.0, R=20.0, **kwargs)

   Bases: :py:obj:`Network`

   Network where the activity of 'Uout' is the derivative of the activity in 'Uin'. Currently only supports
   non-spiking neurons.

   :param slew_rate:   Steepest signal this differentiator can handle, default is 1.0. Influences the difference in
       internal time constants.
   :type slew_rate:    Number, optional
   :param name:        Name of this network, default is 'Differentiate'.
   :type name:         str, optional
   :param tau_fast:    Time constant of the faster neurons, default is 1.0. Units are milliseconds (ms).
   :type tau_fast:     Number, optional


.. py:class:: IntegratorNetwork(integration_gain=0.1, relative_reversal_potential=-40.0, R=20.0, name='Integrator', **kwargs)

   Bases: :py:obj:`Network`

   Network where the activity of 'Uint' integrates the applied stimulus to itself over time. Currently only supports
   non-spiking neurons.

   :param integration_gain:            Gain of the integration, default is 1.0.
   :type integration_gain:             Number, optional
   :param relative_reversal_potential: Reversal potential of the synapses in the network, default is -40.0. Must be
       less than 0. Units are millivolts (mV).
   :type relative_reversal_potential:  Number, optional
   :param name:                        Name of this network, default is 'Integrator'.
   :type name:                         str, optional


