:py:mod:`sns_toolbox.connections`
=================================

.. py:module:: sns_toolbox.connections

.. autoapi-nested-parse::

   Connections are the mechanisms for data transmission between neurons. They can either define an individual conductance-
   based synapse, or a pattern of synapses which is tiled between two populations.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sns_toolbox.connections.Connection
   sns_toolbox.connections.ElectricalSynapse
   sns_toolbox.connections.NonSpikingConnection
   sns_toolbox.connections.SpikingConnection
   sns_toolbox.connections.NonSpikingSynapse
   sns_toolbox.connections.SpikingSynapse
   sns_toolbox.connections.NonSpikingMatrixConnection
   sns_toolbox.connections.SpikingMatrixConnection
   sns_toolbox.connections.NonSpikingPatternConnection
   sns_toolbox.connections.SpikingPatternConnection
   sns_toolbox.connections.NonSpikingTransmissionSynapse
   sns_toolbox.connections.NonSpikingModulationSynapse
   sns_toolbox.connections.SpikingTransmissionSynapse




.. py:class:: Connection(max_conductance, name: str = 'Connection')

   Base class of all connections. Initializes a dictionary of parameters which is modified by classes which inherit
   from it.

   :param max_conductance: All connections have a maximum synaptic conductance. It can be a single value or a matrix,
       but it must be defined.
   :type max_conductance: Number, np.ndarray, or torch.Tensor
   :param name: Name of this connection preset, defaults to 'Connection'.
   :type name: str, optional


.. py:class:: ElectricalSynapse(conductance, name: str = 'Electrical Synapse', rect: bool = False)

   Bases: :py:obj:`Connection`

   Base class of all connections. Initializes a dictionary of parameters which is modified by classes which inherit
   from it.

   :param max_conductance: All connections have a maximum synaptic conductance. It can be a single value or a matrix,
       but it must be defined.
   :type max_conductance: Number, np.ndarray, or torch.Tensor
   :param name: Name of this connection preset, defaults to 'Connection'.
   :type name: str, optional


.. py:class:: NonSpikingConnection(max_conductance, reversal_potential, e_lo, e_hi, name: str = 'Non-Spiking Connection')

   Bases: :py:obj:`Connection`

   Base class of all non-spiking connections. Initializes a dictionary of parameters which is modified by classes
   which inherit from it.

   :param max_conductance: All connections have a maximum synaptic conductance. It can be a single value or a matrix,
       but it must be defined.
   :type max_conductance: Number, np.ndarray, or torch.Tensor
   :param reversal_potential: All chemical connections have a relative synaptic reversal potential. It can be
       a single value or a matrix, but it must be defined.
   :type reversal_potential: Number, np.ndarray, or torch.Tensor
   :param e_lo: Synaptic activation threshold.
   :type e_lo: Number, np.ndarray, or torch.Tensor
   :param e_hi: Synaptic maximum activation limit.
   :type e_hi: Number, np.ndarray, or torch.Tensor
   :param name: Name of this connection preset, defaults to 'Non-Spiking Connection'.
   :type name: str, optional


.. py:class:: SpikingConnection(max_conductance, reversal_potential, time_constant, transmission_delay, name: str = 'Spiking Connection')

   Bases: :py:obj:`Connection`

   Base class of all spiking connections. Initializes a dictionary of parameters which is modified by classes
   which inherit from it.

   :param max_conductance: All connections have a maximum synaptic conductance. It can be a single value or a matrix,
       but it must be defined.
   :type max_conductance: Number, np.ndarray, or torch.Tensor
   :param reversal_potential: All chemical connections have a relative synaptic reversal potential. It can be
       a single value or a matrix, but it must be defined.
   :type reversal_potential: Number, np.ndarray, or torch.Tensor
   :param name: Name of this connection preset, defaults to 'Spiking Connection'.
   :type name: str, optional


.. py:class:: NonSpikingSynapse(max_conductance: float = 1.0, reversal_potential: float = 40.0, e_lo: float = 0.0, e_hi: float = 20.0, **kwargs: Any)

   Bases: :py:obj:`NonSpikingConnection`

   An individual non-spiking synapse, where the conductance is defined as Conductance = max_conductance * max(0,
   min(1, Upre/R)), and the synaptic current is i_syn = Conductance*(reversal_potential - Upost).

   :param max_conductance: Maximum synaptic conductance, defaults to 1.0. Units are micro-siemens (uS).
   :type max_conductance: float, optional
   :param reversal_potential: Synaptic reversal potential, defaults to 40.0. Units are millivolts (mV).
   :type reversal_potential: float, optional
   :param e_lo: Synaptic activation threshold.
   :type e_lo: float
   :param e_hi: Synaptic maximum activation limit.
   :type e_hi: float


.. py:class:: SpikingSynapse(max_conductance: float = 1.0, reversal_potential: float = 194.0, time_constant: float = 1.0, transmission_delay: int = 0, conductance_increment: float = None, **kwargs: Any)

   Bases: :py:obj:`SpikingConnection`

   An individual spiking synapse, where the conductance is reset to max_conductance whenever the pre-synaptic
   neuron spikes, and otherwise decays to zero according to the time constant. Synaptic current
   is i_syn = Conductance*(reversal_potential - Upost). Synaptic propagation can be delayed by a set number
   of timesteps.

   :param max_conductance: Maximum synaptic conductance, defaults to 1.0. Units are micro-siemens (uS).
   :type max_conductance: float, optional
   :param reversal_potential: Synaptic reversal potential, defaults to 194.0. Units are millivolts (mV).
   :type reversal_potential: float, optional
   :param time_constant: Time constant of synaptic decay, defaults to 1.0. Units are milliseconds (ms).
   :type time_constant: float, optional
   :param transmission_delay: Number of timesteps to delay synaptic activity, defaults to 0. Units are timesteps (dt).
   :type transmission_delay: int, optional
   :param conductance_increment: Amount that the conductance is incremented at every presynaptic spiking, defaults to
   max_conductance. Units are millivolts (mV).
   :type conductance_increment: Number, optional


.. py:class:: NonSpikingMatrixConnection(max_conductance, reversal_potential, e_lo, e_hi, **kwargs: Any)

   Bases: :py:obj:`NonSpikingConnection`

   A connection matrix of non-spiking synapses, with matrices representing the maximum conductance and reversal
   potential of each synapse in the pattern.

   :param max_conductance: Matrix of conductance values. Units are micro-siemens (uS).
   :type max_conductance: np.ndarray or torch.Tensor
   :param reversal_potential: Kernel matrix of reversal potential values. Units are millivolts (mV).
   :type reversal_potential: np.ndarray or torch.Tensor
   :param e_lo: Synaptic activation threshold kernel matrix. Units are millivolts (mV)
   :type e_lo: np.ndarray, or torch.Tensor
   :param e_hi: Synaptic maximum activation limit kernel matrix. Units are millivolts (mV)
   :type e_hi: np.ndarray, or torch.Tensor


.. py:class:: SpikingMatrixConnection(max_conductance, reversal_potential, time_constant, transmission_delay, **kwargs: Any)

   Bases: :py:obj:`SpikingConnection`

   A connection matrix of spiking synapses, with matrices representing the maximum conductance, reversal potential, time
   constant, and transmission delay of each synapse in the pattern.

   :param max_conductance: Matrix of conductance values. Units are micro-siemens (uS).
   :type max_conductance: np.ndarray or torch.Tensor
   :param reversal_potential: Kernel matrix of reversal potential values. Units are millivolts (mV).
   :type reversal_potential: np.ndarray or torch.Tensor
   :param time_constant: Matrix of time constant values. Units are milliseconds (ms).
   :type time_constant: np.ndarray or torch.tensor
   :param transmission_delay: Matrix of transmission delays. Units are timesteps (dt).
   :type transmission_delay: np.ndarray or torch.tensor


.. py:class:: NonSpikingPatternConnection(max_conductance_kernel, reversal_potential_kernel, e_lo_kernel, e_hi_kernel, **kwargs: Any)

   Bases: :py:obj:`NonSpikingConnection`

   A pattern of non-spiking synapses, with kernel matrices representing the maximum conductance and reversal potential
   of each synapse in the pattern.

   :param max_conductance_kernel: Kernel matrix of conductance values. Units are micro-siemens (uS).
   :type max_conductance_kernel: np.ndarray or torch.Tensor
   :param reversal_potential_kernel: Kernel matrix of reversal potential values. Units are millivolts (mV).
   :type reversal_potential_kernel: np.ndarray or torch.Tensor
   :param e_lo_kernel: Synaptic activation threshold kernel matrix. Units are millivolts (mV)
   :type e_lo_kernel: np.ndarray, or torch.Tensor
   :param e_hi_kernel: Synaptic maximum activation limit kernel matrix. Units are millivolts (mV)
   :type e_hi_kernel: np.ndarray, or torch.Tensor


.. py:class:: SpikingPatternConnection(max_conductance_kernel, reversal_potential_kernel, time_constant_kernel, transmission_delay_kernel, **kwargs: Any)

   Bases: :py:obj:`SpikingConnection`

   A pattern of spiking synapses, with kernel matrices representing the maximum conductance, reversal potential, time
   constant, and transmission delay of each synapse in the pattern.

   :param max_conductance_kernel: Kernel matrix of conductance values. Units are micro-siemens (uS).
   :type max_conductance_kernel: np.ndarray or torch.tensor
   :param reversal_potential_kernel: Kernel matrix of reversal potential values. Units are millivolts (mV).
   :type reversal_potential_kernel: np.ndarray or torch.tensor
   :param time_constant_kernel: Kernel matrix of time constant values. Units are milliseconds (ms).
   :type time_constant_kernel: np.ndarray or torch.tensor
   :param transmission_delay_kernel: Kernel matrix of transmission delays. Units are timesteps (dt).
   :type transmission_delay_kernel: np.ndarray or torch.tensor


.. py:class:: NonSpikingTransmissionSynapse(gain: float = 1.0, name: str = 'Transmit', R: float = 20.0, **kwargs)

   Bases: :py:obj:`NonSpikingSynapse`

   A non-spiking transmission synapse, where (given some integration_gain) the maximum conductance is
   max_conductance = (integration_gain*R)/(reversal_potential - integration_gain*R).

   :param gain: Transmission integration gain, defaults to 1.0.
   :type gain: Number, optional
   :param name: Name of this synapse preset, defaults to 'Transmit'
   :type name: str, optional
   :param R: Range of neural voltage activity, defaults to 20.0. Units are millivolts (mV).
   :type R: Number


.. py:class:: NonSpikingModulationSynapse(ratio, name: str = 'Modulate', **kwargs)

   Bases: :py:obj:`NonSpikingSynapse`

   A non-spiking modulation synapse, where the reversal_potential is set to 0.

   :param ratio: The desired ratio Upost/Upre when Upre is at max activity (R mV).
   :type ratio: Number
   :param name: Name of this synapse preset, defaults to 'Modulate'.
   :type name: str, optional


.. py:class:: SpikingTransmissionSynapse(gain: float = 1.0, name: str = 'Transmit', max_frequency: float = 10.0, non_linearity: float = 0.1, **kwargs)

   Bases: :py:obj:`SpikingSynapse`

   A spiking version of the non-spiking transmission synapse.

   :param gain: Transmission frequency gain, defaults to 1.0.
   :type gain: Number, optional
   :param name: Name of this preset, defaults to 'Transmit'.
   :type name: str, optional
   :param max_frequency: Maximum spiking frequency, defaults to 10.0. Units are kilohertz (kHz).
   :type max_frequency: Number, optional
   :param non_linearity: A constant between 0 and 1 which limits the synaptic non-linearity. Values closer to 0 improve
       linearity.
   :type non_linearity: Number, optional


